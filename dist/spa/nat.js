const arrayRemove=require("unordered-array-remove"),debugFactory=require("debug"),natUpnp=require("nat-upnp"),natpmp=require("nat-pmp"),network=require("network"),debug=debugFactory("webtorrent:nat");class NatTraversal{constructor(){const t=this;t._destroyed=!1,t.ttl=7200,t.timeout=1e3*(t.ttl-600),t._openedPorts=[],t._intervalsUpnp={},t._intervalsPmp={},t._upnpPortMapping=function(t,n,e){const p=this;debug("Mapping port %d for protocol %s on router using UPnP",t,n),p._upnpClient.portMapping({public:t,private:t,description:"WebTorrent",protocol:n,ttl:p.ttl},(function(o){return p._destroyed?"function"===typeof e&&e():o?"function"===typeof e&&e(o):(p._intervalsUpnp[t]=setInterval(p._pmpPortMapping.bind(p,t,n),p.timeout),debug("Port %d for protocol %s mapped on router using UPnP",t,n),void("function"===typeof e&&e()))}))},t._pmpPortMapping=function(t,n,e){const p=this;debug("Mapping port %d for protocol %s on router using NAT-PMP",t,n),p._pmpClient.portMapping({private:t,public:t,ttl:p.ttl,type:n},(function(o){return p._destroyed?"function"===typeof e&&e():o?(debug("Error mapping port %d using NAT-PMP",t,o),"function"===typeof e&&e(o)):(p._intervalsPmp[t]=setInterval(p._pmpPortMapping.bind(p,t,n),p.timeout),debug("Port %d for protocol %s mapped on router using NAT-PMP",t,n),void("function"===typeof e&&e()))}))},debug("UPnP client creation"),t._upnpClient=natUpnp.createClient(),debug("Lookup gateway IP"),network.get_gateway_ip((function(n,e){if(!t._destroyed){if(n)return debug("Could not find gateway IP for NAT-PMP",n);debug("NAT-PMP client creation",e),t._pmpClient=natpmp.connect(e),t._openedPorts.forEach((function(n){t._pmpPortMapping(n.port,n.protocol)}))}}))}portMapping(t,n,e){const p=this;if(p._destroyed)return"function"===typeof c&&e();"function"===typeof n&&(e=n,n="tcp"),p._openedPorts.push({port:t,protocol:n}),p._upnpPortMapping(t,n,(function(o){if(p._destroyed)return"function"===typeof e&&e();o&&debug("UPnP port mapping failed on %d",t,o.message),p._pmpClient?p._pmpPortMapping(t,n,e):"function"===typeof e&&e()}))}portUnMapping(t,n){const e=this;if(e._destroyed)return"function"===typeof n&&n();arrayRemove(e._openedPorts,e._openedPorts.findIndex((n=>n.port===t))),e._intervalsUpnp[t]&&(clearInterval(e._intervalsUpnp[t]),delete e._intervalsUpnp[t]),e._intervalsPmp[t]&&(clearInterval(e._intervalsPmp[t]),delete e._intervalsPmp[t]),debug("Unmapping port %d on router using UPnP",t),e._upnpClient.portUnmapping({public:t},(function(p){p||debug("Port %d unmapped on router using UPnP",t),e._pmpClient?(debug("Unmapping port %d on router using NAT-PMP",t),e._pmpClient.portUnmapping({private:t,public:t},n)):"function"===typeof n&&n()}))}destroy(t){const n=this;if(n._destroyed)return t();n._openedPorts.forEach((function(t){n.portUnMapping(t.port)})),n._destroyed=!0,n._pmpClient&&(debug("Close pmp client"),n._pmpClient.close()),process.nextTick((function(){debug("Close UPnP client"),n._upnpClient.close(),t()}))}}const natTraversal=new NatTraversal;export default natTraversal;