diff --git a/node_modules/gun/gun.js b/node_modules/gun/gun.js
index b323e92..0331c89 100644
--- a/node_modules/gun/gun.js
+++ b/node_modules/gun/gun.js
@@ -1,5 +1,53 @@
 ;(function(){
-
+	function isNotAB (key = '', val = {}) {
+		if (key.startsWith('ab-')) return false
+		if (window.LIBDB_NAME) {
+			if (key.startsWith(window.LIBDB_NAME.toLowerCase())) return false
+		}
+		if (!key.startsWith('~')) return true
+		if (key.startsWith('~@')) return key.length !== 42
+		const splitted = key.split('/')
+		if (splitted.length === 1) {
+			const [a, b] = splitted[0].split('.')
+			if (!a || !b) return true
+			if (a.length < 40 || b.length < 40) return true
+			const keys = Object.keys(val)
+			return keys.some(k => ![
+				'_', '#', '>', 'alias', 'auth', 'pub', 'epub',
+				'profile', 'follow', 'channels',
+				'blockChannels', 'blockUsers',
+				'takedowns'
+			].includes(k))
+		}
+		const keyword = splitted[1]
+		if (![
+			'follow',
+			'profile',
+			'channels',
+			'takedowns'
+		].includes(keyword)) return true
+		const keys = splitted[2] ? [splitted[2]] : Object.keys(val)
+		if (keyword === 'profile') {
+			if (keys.some(k => ![
+				'_', '#', '>',
+				'avatar', 'description', 'name', 'id',
+				'blockChannels', 'blockUsers'
+			].includes(k))) {
+				return true
+			}
+			return false
+		}
+		if (keyword === 'follow') {
+			return keys.some(k => {
+				if (k.match(/[^.]{43}\.[^.]{43}/) && !k.includes('channels')) return true
+				return false
+			})
+		}
+		// if (keyword === 'channels') {
+		// 	return keys.some(k => k.length !== 20)
+		// }
+		return Object.values(val).some(k => (typeof k === 'string' && k.includes('data:image')))
+	}
   /* UNBUILD */
   function USE(arg, req){
     return req? require(arg) : arg.slice? USE[R(arg)] : function(mod, path){
@@ -62,34 +110,53 @@
 			return l;
 		}
 		;(function(){ // max ~1ms or before stack overflow 
-			var u, sT = setTimeout, l = 0, c = 0, sI = (typeof setImmediate !== ''+u && setImmediate) || sT; // queueMicrotask faster but blocks UI
+			var u, sT = setTimeout, l = 0, c = 0, sI = (typeof queueMicrotask !== ''+u && queueMicrotask) || setImmediate; // queueMicrotask faster but blocks UI
 			sT.hold = sT.hold || 9;
 			sT.poll = sT.poll || function(f){ //f(); return; // for testing
-				if((sT.hold >= (+new Date - l)) && c++ < 3333){ f(); return }
-				sI(function(){ l = +new Date; f() },c=0)
+				// if((sT.hold >= (Date.now() - l)) && c++ < 333){ f(); return }
+				// sI(function(){ l = Date.now(); f() },c=0)
+				sI(f)
 			}
 		}());
 		;(function(){ // Too many polls block, this "threads" them in turns over a single thread in time.
-			var sT = setTimeout, t = sT.turn = sT.turn || function(f){ 1 == s.push(f) && p(T) }
-			, s = t.s = [], p = sT.poll, i = 0, f, T = function(){
-				if(f = s[i++]){ f() }
-				if(i == s.length || 99 == i){
-					s = t.s = s.slice(i);
-					i = 0;
+			const ua = navigator.userAgent.toLowerCase()
+			const isMobile = ua.includes('iphone') || ua.includes('android') || ua.includes('ios')
+			const rIC = isMobile ? fn => setTimeout(fn, 200) : window.queueMicrotask ? window.queueMicrotask : fn => setTimeout(fn, 100)
+			var sT = setTimeout, t = sT.turn = sT.turn || function (f) { 1 == s.push(f) && p(T) }
+			, s = t.s = [], p = rIC, i = 0, f, T = function(){
+				const start = Date.now()
+				while(f = s[i++]){
+					f()
+					// Spend over a hard time
+					if (Date.now() - start > 50) {
+						// console.log(`Break blocks: ${i} done. ${s.length - i} pending. ${s.length} total.`)
+						break
+					}
 				}
+				// if(i == s.length || i >= 99){
+				s = t.s = s.slice(i);
+				i = 0;
+				// }
 				if(s.length){ p(T) }
 			}
 		}());
 		;(function(){
 			var u, sT = setTimeout, T = sT.turn;
-			(sT.each = sT.each || function(l,f,e,S){ S = S || 9; (function t(s,L,r){
-			  if(L = (s = (l||[]).splice(0,S)).length){
-			  	for(var i = 0; i < L; i++){
-			  		if(u !== (r = f(s[i]))){ break }
-			  	}
-			  	if(u === r){ T(t); return }
-			  } e && e(r);
-			}())})();
+			// (sT.each = sT.each || function(l,f,e,S){ S = 30; (function t(s,L,r){
+			//   if(L = (s = (l||[]).splice(0,S)).length){
+			//   	for(var i = 0; i < L; i++){
+			//   		if(u !== (r = f(s[i]))){ break }
+			//   	}
+			//   	if(u === r){ T(t); return }
+			//   } e && e(r);
+			// }())})();
+			sT.each = sT.each || function (l, f, e, S) {
+				// console.log('sT.each', l, typeof f, e, S)
+				for (const i of l) {
+					if (u !== (r = f(i))) break
+				}
+				e && e(r)
+			}
 		}());
 	})(USE, './shim');
 
@@ -150,7 +217,7 @@
 	;USE(function(module){
 		USE('./shim');
 		function State(){
-			var t = +new Date;
+			var t = Date.now();
 			if(last < t){
 				return N = 0, last = t + State.drift;
 			}
@@ -187,19 +254,24 @@
 			}
 			var dt = dup.track = function(id){
 				var it = s[id] || (s[id] = {});
-				it.was = dup.now = +new Date;
+				it.was = dup.now = Date.now();
 				if(!dup.to){ dup.to = setTimeout(dup.drop, opt.age + 9) }
 				return it;
 			}
 			dup.drop = function(age){
 				dup.to = null;
-				dup.now = +new Date;
-				var l = Object.keys(s);
-				console.STAT && console.STAT(dup.now, +new Date - dup.now, 'dup drop keys'); // prev ~20% CPU 7% RAM 300MB // now ~25% CPU 7% RAM 500MB
-				setTimeout.each(l, function(id){ var it = s[id]; // TODO: .keys( is slow?
-					if(it && (age || opt.age) > (dup.now - it.was)){ return }
-					delete s[id];
-				},0,99);
+				dup.now = Date.now();
+				// var l = Object.keys(s);
+				console.STAT && console.STAT(dup.now, Date.now() - dup.now, 'dup drop keys'); // prev ~20% CPU 7% RAM 300MB // now ~25% CPU 7% RAM 500MB
+				// setTimeout.each(l, function(id){ var it = s[id]; // TODO: .keys( is slow?
+				// 	if(it && (age || opt.age) > (dup.now - it.was)){ return }
+				// 	delete s[id];
+				// },0,99);
+				for (const id in s) {
+					var it = s[id]
+					if (it && (age || opt.age) > (dup.now - it.was)) continue
+					delete s[id]
+				}
 			}
 			return dup;
 		}
@@ -286,19 +358,37 @@
 				(msg.$ && (msg.$ === (msg.$._||'').$)) || (msg.$ = gun);
 				if(msg['@'] && !msg.put){ ack(msg) }
 				if(!at.ask(msg['@'], msg)){ // is this machine listening for an ack?
-					DBG && (DBG.u = +new Date);
+					DBG && (DBG.u = Date.now());
 					if(msg.put){ put(msg); return } else
 					if(msg.get){ Gun.on.get(msg, gun) }
 				}
-				DBG && (DBG.uc = +new Date);
+				DBG && (DBG.uc = Date.now());
 				eve.to.next(msg);
-				DBG && (DBG.ua = +new Date);
+				DBG && (DBG.ua = Date.now());
 				if(msg.nts || msg.NTS){ return } // TODO: This shouldn't be in core, but fast way to prevent NTS spread. Delete this line after all peers have upgraded to newer versions.
 				msg.out = universe; at.on('out', msg);
-				DBG && (DBG.ue = +new Date);
+				DBG && (DBG.ue = Date.now());
 			}
+			// let logged = false
 			function put(msg){
-				if(!msg){ return }
+				if(!msg || !msg.put){ return }
+				// if (!logged) {
+				// 	console.log('@put', msg)
+				// 	if (Math.random() > .6) logged = true
+				// }
+				// Some dirty data others created made our app crashed, ignore them
+				for (const key in msg.put) {
+					if (isNotAB(key, msg.put[key])) {
+						// console.log('skip putting', key, msg.put[key])
+						delete msg.put[key];
+					}
+				}
+				if (Object.keys(msg.put).length === 0) return
+				// if (Object.keys(msg.put).some(k => k.startsWith('undefined'))) {
+				// 	// return console.log('skip')
+				// 	return
+				// }
+				// console.log('@put', msg)
 				var ctx = msg._||'', root = ctx.root = ((ctx.$ = msg.$||'')._||'').root;
 				if(msg['@'] && ctx.faith && !ctx.miss){ // TODO: AXE may split/route based on 'put' what should we do here? Detect @ in AXE? I think we don't have to worry, as DAM will route it on @.
 					msg.out = universe;
@@ -307,7 +397,7 @@
 				}
 				ctx.latch = root.hatch; ctx.match = root.hatch = [];
 				var put = msg.put;
-				var DBG = ctx.DBG = msg.DBG, S = +new Date; CT = CT || S;
+				var DBG = ctx.DBG = msg.DBG, S = Date.now(); CT = CT || S;
 				if(put['#'] && put['.']){ /*root && root.on('put', msg);*/ return } // TODO: BUG! This needs to call HAM instead.
 				DBG && (DBG.p = S);
 				ctx['#'] = msg['#'];
@@ -315,12 +405,12 @@
 				ctx.all = 0;
 				ctx.stun = 1;
 				var nl = Object.keys(put);//.sort(); // TODO: This is unbounded operation, large graphs will be slower. Write our own CPU scheduled sort? Or somehow do it in below? Keys itself is not O(1) either, create ES5 shim over ?weak map? or custom which is constant.
-				console.STAT && console.STAT(S, ((DBG||ctx).pk = +new Date) - S, 'put sort');
+				console.STAT && console.STAT(S, ((DBG||ctx).pk = Date.now()) - S, 'put sort');
 				var ni = 0, nj, kl, soul, node, states, err, tmp;
 				(function pop(o){
 					if(nj != ni){ nj = ni;
 						if(!(soul = nl[ni])){
-							console.STAT && console.STAT(S, ((DBG||ctx).pd = +new Date) - S, 'put');
+							console.STAT && console.STAT(S, ((DBG||ctx).pd = Date.now()) - S, 'put');
 							fire(ctx);
 							return;
 						}
@@ -337,7 +427,8 @@
 						return;
 					}
 					var i = 0, key; o = o || 0;
-					while(o++ < 9 && (key = kl[i++])){
+					// var logged = false
+					while(o++ < 999 && (key = kl[i++])){
 						if('_' === key){ continue }
 						var val = node[key], state = states[key];
 						if(u === state){ err = ERR+cut(key)+"on"+cut(soul)+"no state."; break }
@@ -345,6 +436,10 @@
 						//ctx.all++; //ctx.ack[soul+key] = '';
 						ham(val, key, soul, state, msg);
 						++C; // courtesy count;
+						// if (C>999 && !logged) {
+						// 	logged = true
+						// 	console.log('C>999', msg, node)
+						// }
 					}
 					if((kl = kl.slice(i)).length){ turn(pop); return }
 					++ni; kl = null; pop(o);
@@ -360,21 +455,22 @@
 
 				var now = State(), u;
 				if(state > now){
+					console.log('state > now', state, now)
 					setTimeout(function(){ ham(val, key, soul, state, msg) }, (tmp = state - now) > MD? MD : tmp); // Max Defer 32bit. :(
-					console.STAT && console.STAT(((DBG||ctx).Hf = +new Date), tmp, 'future');
+					console.STAT && console.STAT(((DBG||ctx).Hf = Date.now()), tmp, 'future');
 					return;
 				}
-				if(state < was){ /*old;*/ if(!ctx.miss){ return } } // but some chains have a cache miss that need to re-fire. // TODO: Improve in future. // for AXE this would reduce rebroadcast, but GUN does it on message forwarding.
+				if(state <= was){ /*old;*/ if(!ctx.miss){ return /*console.log('state <= was', state, was, key, val)*/ } } // but some chains have a cache miss that need to re-fire. // TODO: Improve in future. // for AXE this would reduce rebroadcast, but GUN does it on message forwarding.
 				if(!ctx.faith){ // TODO: BUG? Can this be used for cache miss as well? // Yes this was a bug, need to check cache miss for RAD tests, but should we care about the faith check now? Probably not.
 					if(state === was && (val === known || L(val) <= L(known))){ /*console.log("same");*/ /*same;*/ if(!ctx.miss){ return } } // same
 				}
 				ctx.stun++; // TODO: 'forget' feature in SEA tied to this, bad approach, but hacked in for now. Any changes here must update there.
 				var aid = msg['#']+ctx.all++, id = {toString: function(){ return aid }, _: ctx}; id.toJSON = id.toString; // this *trick* makes it compatible between old & new versions.
-				DBG && (DBG.ph = DBG.ph || +new Date);
+				DBG && (DBG.ph = DBG.ph || Date.now());
 				root.on('put', {'#': id, '@': msg['@'], put: {'#': soul, '.': key, ':': val, '>': state}, _: ctx});
 			}
 			function map(msg){
-				var DBG; if(DBG = (msg._||'').DBG){ DBG.pa = +new Date; DBG.pm = DBG.pm || +new Date}
+				var DBG; if(DBG = (msg._||'').DBG){ DBG.pa = Date.now(); DBG.pm = DBG.pm || Date.now()}
       	var eve = this, root = eve.as, graph = root.graph, ctx = msg._, put = msg.put, soul = put['#'], key = put['.'], val = put[':'], state = put['>'], id = msg['#'], tmp;
       	if((tmp = ctx.msg) && (tmp = tmp.put) && (tmp = tmp[soul])){ state_ify(tmp, key, state, val, soul) } // necessary! or else out messages do not get SEA transforms.
 				graph[soul] = state_ify(graph[soul], key, state, val, soul);
@@ -395,7 +491,7 @@
 				msg.out = universe;
 				ctx.root.on('out', msg);
 
-				CF(); // courtesy check;
+				// CF(); // courtesy check;
 			}
 			function ack(msg){ // aggregate ACKs.
 				var id = msg['@'] || '', ctx;
@@ -417,7 +513,12 @@
 			var ERR = "Error: Invalid graph!";
 			var cut = function(s){ return " '"+(''+s).slice(0,9)+"...' " }
 			var L = JSON.stringify, MD = 2147483647, State = Gun.state;
-			var C = 0, CT, CF = function(){if(C>999 && (C/-(CT - (CT = +new Date))>1)){Gun.window && console.log("Warning: You're syncing 1K+ records a second, faster than DOM can update - consider limiting query.");CF=function(){C=0}}};
+			var C = 0, CT, CF = function(){
+				if(C>999 && (C/-(CT - (CT = Date.now()))>1)){
+					Gun.window && console.log("Warning: You're syncing 1K+ records a second, faster than DOM can update - consider limiting query.");
+					CF=function(){C=0}
+				}
+			};
 
 		}());
 
@@ -444,7 +545,7 @@
 					at.Q = {};
 				}*/
 				var ctx = msg._||{}, DBG = ctx.DBG = msg.DBG;
-				DBG && (DBG.g = +new Date);
+				DBG && (DBG.g = Date.now());
 				//console.log("GET:", get, node, has);
 				if(!node){ return root.on('get', msg) }
 				if(has){
@@ -459,12 +560,12 @@
 				root.on('get', msg); // send GET to storage adapters.
 			}
 			function ack(msg, node){
-				var S = +new Date, ctx = msg._||{}, DBG = ctx.DBG = msg.DBG;
+				var S = Date.now(), ctx = msg._||{}, DBG = ctx.DBG = msg.DBG;
 				var to = msg['#'], id = text_rand(9), keys = Object.keys(node||'').sort(), soul = ((node||'')._||'')['#'], kl = keys.length, j = 0, root = msg.$._.root, F = (node === root.graph[soul]);
-				console.STAT && console.STAT(S, ((DBG||ctx).gk = +new Date) - S, 'got keys');
+				console.STAT && console.STAT(S, ((DBG||ctx).gk = Date.now()) - S, 'got keys');
 				// PERF: Consider commenting this out to force disk-only reads for perf testing? // TODO: .keys( is slow
 				node && (function go(){
-					S = +new Date;
+					S = Date.now();
 					var i = 0, k, put = {}, tmp;
 					while(i < 9 && (k = keys[i++])){
 						state_ify(put, k, state_is(node, k), node[k], soul);
@@ -473,10 +574,10 @@
 					(tmp = {})[soul] = put; put = tmp;
 					var faith; if(F){ faith = function(){}; faith.ram = faith.faith = true; } // HNPERF: We're testing performance improvement by skipping going through security again, but this should be audited.
 					tmp = keys.length;
-					console.STAT && console.STAT(S, -(S - (S = +new Date)), 'got copied some');
-					DBG && (DBG.ga = +new Date);
+					console.STAT && console.STAT(S, -(S - (S = Date.now())), 'got copied some');
+					DBG && (DBG.ga = Date.now());
 					root.on('in', {'@': to, '#': id, put: put, '%': (tmp? (id = text_rand(9)) : u), $: root.$, _: faith, DBG: DBG});
-					console.STAT && console.STAT(S, +new Date - S, 'got in');
+					console.STAT && console.STAT(S, Date.now() - S, 'got in');
 					if(!tmp){ return }
 					setTimeout.turn(go);
 				}());
@@ -825,7 +926,7 @@
 			var gun, tmp;
 			if(typeof key === 'string'){
 				if(key.length == 0) {	
-					(gun = this.chain())._.err = {err: Gun.log('0 length key!', key)};
+					(gun = this.chain())._.err = {err: '0 length key! ' + key};
 					if(cb){ cb.call(gun, gun._.err) }
 					return gun;
 				}
@@ -969,9 +1070,6 @@
 			if(tmp = (seen = this.seen || (this.seen = {}))[at]){ return true }
 			seen[at] = true;
 			return;
-			//tmp.echo[cat.id] = {}; // TODO: Warning: This unsubscribes ALL of this chain's listeners from this link, not just the one callback event.
-			//obj.del(map, at); // TODO: Warning: This unsubscribes ALL of this chain's listeners from this link, not just the one callback event.
-			return;
 		}
 		var empty = {}, valid = Gun.valid, u;
 	})(USE, './get');
@@ -979,6 +1077,7 @@
 	;USE(function(module){
 		var Gun = USE('./root');
 		Gun.chain.put = function(data, cb, as){ // I rewrote it :)
+			// console.log('@@put', data, cb, as)
 			var gun = this, at = gun._, root = at.root;
 			as = as || {};
 			as.root = at.root;
@@ -1068,11 +1167,6 @@
 				}
 				test.run = test.run || as.run;
 				test.stun = test.stun || as.stun; return;
-				if(this.to.to){
-					this.the.last.next(test);
-					return;
-				}
-				test.stun = as.stun;
 			});
 		}
 
@@ -1112,16 +1206,7 @@
 				as.via = at.root.$.get(((as.data||'')._||'')['#'] || at.$.back('opt.uuid')())
 			}
 			as.via.put(as.data, as.ack, as);
-			
-
 			return;
-			if(at.get && at.back.soul){
-				tmp = as.data;
-				as.via = at.back.$;
-				(as.data = {})[at.get] = tmp; 
-				as.via.put(as.data, as.ack, as);
-				return;
-			}
 		}
 		function check(d, tmp){ return ((d && (tmp = d.constructor) && tmp.name) || typeof d) }
 
@@ -1343,8 +1428,8 @@
 		USE('./shim');
 
 		var noop = function(){}
-		var parse = JSON.parseAsync || function(t,cb,r){ var u, d = +new Date; try{ cb(u, JSON.parse(t,r), json.sucks(+new Date - d)) }catch(e){ cb(e) } }
-		var json = JSON.stringifyAsync || function(v,cb,r,s){ var u, d = +new Date; try{ cb(u, JSON.stringify(v,r,s), json.sucks(+new Date - d)) }catch(e){ cb(e) } }
+		var parse = JSON.parseAsync || function(t,cb,r){ var u, d = Date.now(); try{ cb(u, JSON.parse(t,r), json.sucks(Date.now() - d)) }catch(e){ cb(e) } }
+		var json = JSON.stringifyAsync || function(v,cb,r,s){ var u, d = Date.now(); try{ cb(u, JSON.stringify(v,r,s), json.sucks(Date.now() - d)) }catch(e){ cb(e) } }
 		json.sucks = function(d){ if(d > 99){ console.log("Warning: JSON blocking CPU detected. Add `gun/lib/yson.js` to fix."); json.sucks = noop } }
 
 		function Mesh(root){
@@ -1359,7 +1444,7 @@
 
 			var dup = root.dup, dup_check = dup.check, dup_track = dup.track;
 
-			var ST = +new Date, LT = ST;
+			var ST = Date.now(), LT = ST;
 
 			var hear = mesh.hear = function(raw, peer){
 				if(!raw){ return }
@@ -1369,22 +1454,22 @@
 						var stat = console.STAT || {};
 						//console.log('HEAR:', peer.id, (raw||'').slice(0,250), ((raw||'').length / 1024 / 1024).toFixed(4));
 						
-						//console.log(setTimeout.turn.s.length, 'stacks', parseFloat((-(LT - (LT = +new Date))/1000).toFixed(3)), 'sec', parseFloat(((LT-ST)/1000 / 60).toFixed(1)), 'up', stat.peers||0, 'peers', stat.has||0, 'has', stat.memhused||0, stat.memused||0, stat.memax||0, 'heap mem max');
+						//console.log(setTimeout.turn.s.length, 'stacks', parseFloat((-(LT - (LT = Date.now()))/1000).toFixed(3)), 'sec', parseFloat(((LT-ST)/1000 / 60).toFixed(1)), 'up', stat.peers||0, 'peers', stat.has||0, 'has', stat.memhused||0, stat.memused||0, stat.memax||0, 'heap mem max');
 					}catch(e){ console.log('DBG err', e) }}*/
 					hear.d += raw.length||0 ; ++hear.c } // STATS!
-				var S = peer.SH = +new Date;
+				var S = peer.SH = Date.now();
 				var tmp = raw[0], msg;
 				//raw && raw.slice && console.log("hear:", ((peer.wire||'').headers||'').origin, raw.length, raw.slice && raw.slice(0,50)); //tc-iamunique-tc-package-ds1
 				if('[' === tmp){
 					parse(raw, function(err, msg){
 						if(err || !msg){ return mesh.say({dam: '!', err: "DAM JSON parse error."}, peer) }
-						console.STAT && console.STAT(+new Date, msg.length, '# on hear batch');
+						console.STAT && console.STAT(Date.now(), msg.length, '# on hear batch');
 						var P = opt.puff;
 						(function go(){
-							var S = +new Date;
+							var S = Date.now();
 							var i = 0, m; while(i < P && (m = msg[i++])){ mesh.hear(m, peer) }
 							msg = msg.slice(i); // slicing after is faster than shifting during.
-							console.STAT && console.STAT(S, +new Date - S, 'hear loop');
+							console.STAT && console.STAT(S, Date.now() - S, 'hear loop');
 							flush(peer); // force send all synchronously batched acks.
 							if(!msg.length){ return }
 							puff(go, 0);
@@ -1406,7 +1491,7 @@
 				var id, hash, tmp, ash, DBG;
 				if(msg.DBG){ msg.DBG = DBG = {DBG: msg.DBG} }
 				DBG && (DBG.h = S);
-				DBG && (DBG.hp = +new Date);
+				DBG && (DBG.hp = Date.now());
 				if(!(id = msg['#'])){ id = msg['#'] = String.random(9) }
 				if(tmp = dup_check(id)){ return }
 				// DAM logic:
@@ -1422,12 +1507,12 @@
 					dup_track(id);
 					return;
 				}
-				var S = +new Date;
+				var S = Date.now();
 				DBG && (DBG.is = S); peer.SI = id;
 				root.on('in', mesh.last = msg);
 				//ECHO = msg.put || ECHO; !(msg.ok !== -3740) && mesh.say({ok: -3740, put: ECHO, '@': msg['#']}, peer);
-				DBG && (DBG.hd = +new Date);
-				console.STAT && console.STAT(S, +new Date - S, msg.get? 'msg get' : msg.put? 'msg put' : 'msg');
+				DBG && (DBG.hd = Date.now());
+				console.STAT && console.STAT(S, Date.now() - S, msg.get? 'msg get' : msg.put? 'msg put' : 'msg');
 				(tmp = dup_track(id)).via = peer; // don't dedup message ID till after, cause GUN has internal dedup check.
 				if(msg.get){ tmp.it = msg }
 				if(ash){ dup_track(ash) } //dup.track(tmp+hash, true).it = it(msg);
@@ -1440,12 +1525,12 @@
 				var SMIA = 0;
 				var loop;
 				mesh.hash = function(msg, peer){ var h, s, t;
-					var S = +new Date;
+					var S = Date.now();
 					json(msg.put, function hash(err, text){
 						var ss = (s || (s = t = text||'')).slice(0, 32768); // 1024 * 32
 					  h = String.hash(ss, h); s = s.slice(32768);
 					  if(s){ puff(hash, 0); return }
-						console.STAT && console.STAT(S, +new Date - S, 'say json+hash');
+						console.STAT && console.STAT(S, Date.now() - S, 'say json+hash');
 					  msg._.$put = t;
 					  msg['##'] = h;
 					  mesh.say(msg, peer);
@@ -1464,7 +1549,7 @@
 					var id, hash, raw, ack = msg['@'];
 //if(opt.super && (!ack || !msg.put)){ return } // TODO: MANHATTAN STUB //OBVIOUSLY BUG! But squelch relay. // :( get only is 100%+ CPU usage :(
 					var meta = msg._||(msg._=function(){});
-					var DBG = msg.DBG, S = +new Date; meta.y = meta.y || S; if(!peer){ DBG && (DBG.y = S) }
+					var DBG = msg.DBG, S = Date.now(); meta.y = meta.y || S; if(!peer){ DBG && (DBG.y = S) }
 					if(!(id = msg['#'])){ id = msg['#'] = String.random(9) }
 					!loop && dup_track(id);//.it = it(msg); // track for 9 seconds, default. Earth<->Mars would need more! // always track, maybe move this to the 'after' logic if we split function.
 					if(msg.put && (msg.err || (dup.s[id]||'').err)){ return false } // TODO: in theory we should not be able to stun a message, but for now going to check if it can help network performance preventing invalid data to relay.
@@ -1472,20 +1557,20 @@
 					if(!peer && ack){ peer = ((tmp = dup.s[ack]) && (tmp.via || ((tmp = tmp.it) && (tmp = tmp._) && tmp.via))) || ((tmp = mesh.last) && ack === tmp['#'] && mesh.leap) } // warning! mesh.leap could be buggy! mesh last check reduces this.
 					if(!peer && ack){ // still no peer, then ack daisy chain lost.
 						if(dup.s[ack]){ return } // in dups but no peer hints that this was ack to self, ignore.
-						console.STAT && console.STAT(+new Date, ++SMIA, 'total no peer to ack to');
+						console.STAT && console.STAT(Date.now(), ++SMIA, 'total no peer to ack to');
 						return false;
 					} // TODO: Temporary? If ack via trace has been lost, acks will go to all peers, which trashes browser bandwidth. Not relaying the ack will force sender to ask for ack again. Note, this is technically wrong for mesh behavior.
 					if(!peer && mesh.way){ return mesh.way(msg) }
-					DBG && (DBG.yh = +new Date);
+					DBG && (DBG.yh = Date.now());
 					if(!(raw = meta.raw)){ mesh.raw(msg, peer); return }
-					DBG && (DBG.yr = +new Date);
+					DBG && (DBG.yr = Date.now());
 					if(!peer || !peer.id){
 						if(!Object.plain(peer || opt.peers)){ return false }
-						var S = +new Date;
+						var S = Date.now();
 						var P = opt.puff, ps = opt.peers, pl = Object.keys(peer || opt.peers || {}); // TODO: .keys( is slow
-						console.STAT && console.STAT(S, +new Date - S, 'peer keys');
+						console.STAT && console.STAT(S, Date.now() - S, 'peer keys');
 						;(function go(){
-							var S = +new Date;
+							var S = Date.now();
 							//Type.obj.map(peer || opt.peers, each); // in case peer is a peer list.
 							loop = 1; var wr = meta.raw; meta.raw = raw; // quick perf hack
 							var i = 0, p; while(i < 9 && (p = (pl||'')[i++])){
@@ -1494,7 +1579,7 @@
 							}
 							meta.raw = wr; loop = 0;
 							pl = pl.slice(i); // slicing after is faster than shifting during.
-							console.STAT && console.STAT(S, +new Date - S, 'say loop');
+							console.STAT && console.STAT(S, Date.now() - S, 'say loop');
 							if(!pl.length){ return }
 							puff(go, 0);
 							ack && dup_track(ack); // keep for later
@@ -1506,7 +1591,7 @@
 					if(id === peer.last){ return } peer.last = id;  // was it just sent?
 					if(peer === meta.via){ return false } // don't send back to self.
 					if((tmp = meta.yo) && (tmp[peer.url] || tmp[peer.pid] || tmp[peer.id]) /*&& !o*/){ return false }
-					console.STAT && console.STAT(S, ((DBG||meta).yp = +new Date) - (meta.y || S), 'say prep');
+					console.STAT && console.STAT(S, ((DBG||meta).yp = Date.now()) - (meta.y || S), 'say prep');
 					!loop && ack && dup_track(ack); // streaming long responses needs to keep alive the ack.
 					if(peer.batch){
 						peer.tail = (tmp = peer.tail || 0) + raw.length;
@@ -1517,13 +1602,13 @@
 						flush(peer);
 					}
 					peer.batch = '['; // Prevents double JSON!
-					var ST = +new Date;
+					var ST = Date.now();
 					setTimeout(function(){
-						console.STAT && console.STAT(ST, +new Date - ST, '0ms TO');
+						console.STAT && console.STAT(ST, Date.now() - ST, '0ms TO');
 						flush(peer);
 					}, opt.gap); // TODO: queuing/batching might be bad for low-latency video game performance! Allow opt out?
 					send(raw, peer);
-					console.STAT && (ack === peer.SI) && console.STAT(S, +new Date - peer.SH, 'say ack');
+					console.STAT && (ack === peer.SI) && console.STAT(S, Date.now() - peer.SH, 'say ack');
 				}
 				mesh.say.c = mesh.say.d = 0;
 				// TODO: this caused a out-of-memory crash!
@@ -1553,10 +1638,10 @@
 						tmp.put = ':])([:';
 						json(tmp, function(err, raw){
 							if(err){ return } // TODO: Handle!!
-							var S = +new Date;
+							var S = Date.now();
 							tmp = raw.indexOf('"put":":])([:"');
 							res(u, raw = raw.slice(0, tmp+6) + put + raw.slice(tmp + 14));
-							console.STAT && console.STAT(S, +new Date - S, 'say slice');
+							console.STAT && console.STAT(S, Date.now() - S, 'say slice');
 						});
 						return;
 					}
@@ -1576,13 +1661,16 @@
 				if(!tmp){ return }
 				if(t? 3 > tmp.length : !tmp.length){ return } // TODO: ^
 				if(!t){try{tmp = (1 === tmp.length? tmp[0] : JSON.stringify(tmp));
-				}catch(e){return opt.log('DAM JSON stringify error', e)}}
+				}catch(e){return opt.log('DAM JSON stringify error', e) && console.log(e)}}
 				if(!tmp){ return }
 				send(tmp, peer);
 			}
 			// for now - find better place later.
 			function send(raw, peer){ try{
 				var wire = peer.wire;
+				// if (peer.id && !peer.id.startsWith('http')) console.log('[send]', peer.id, raw, new Error().stack)
+				// The readyState in WebSocket is a number but in WebRTC a string
+				if (wire.readyState !== WebSocket.OPEN && wire.readyState !== 'open') return;
 				if(peer.say){
 					peer.say(raw);
 				} else
@@ -1591,7 +1679,7 @@
 				}
 				mesh.say.d += raw.length||0; ++mesh.say.c; // STATS!
 			}catch(e){
-				(peer.queue = peer.queue || []).push(raw);
+				(peer.queue = peer.queue || []).splice(10, 999, raw);
 			}}
 
 			mesh.hi = function(peer){
@@ -1689,20 +1777,63 @@
 			var wire = mesh.wire || opt.wire;
 			mesh.wire = opt.wire = open;
 			function open(peer){ try{
-				if(!peer || !peer.url){ return wire && wire(peer) }
+				if(!peer || !peer.url){ return }
 				var url = peer.url.replace(/^http/, 'ws');
-				var wire = peer.wire = new opt.WebSocket(url);
+				var wire
+				try {
+					wire = peer.wire = new opt.WebSocket(url);
+					wire.onerror = e => {
+						e.stopImmediatePropagation()
+						e.preventDefault()
+						e.stopPropagation()
+						e.returnValue = false
+						// console.log('error', e)
+						// if (peer) {
+						// 	peer.__disable = true
+						// }
+						return false
+					}
+					// console.log('conn', url)
+				} catch (e) {
+					return
+				}
+				const closeWire = () => {
+					if (wire.readyState === WebSocket.CLOSED || wire.readyState === WebSocket.CLOSING) return
+					// console.log('WebSocket timeout. Close wire.', url)
+					/**
+					 * Custom error code should between 3000 and 3999, and
+					 * 3000 is already used as "unauthorized".
+					 */
+					wire.close(3001, 'timeout')
+					// wire.send('[]')
+				}
+				wire.refresh = () => {
+					// console.log('refresh by', by)
+					if (wire.timeout) clearTimeout(wire.timeout)
+					/**
+					 * The WebSocket heartbeat sent every 20 seconds, while gun server
+					 * sends data every 3 or 6 seconds. So we don't need to wait for
+					 * the whole 20 second to check if we are online. We just wait for
+					 * a six-second sync and a three, then close if nothing recieved.
+					 */
+					wire.timeout = setTimeout(closeWire, 30000)
+				}
+				wire.refresh('init')
 				wire.onclose = function(){
 					opt.mesh.bye(peer);
 					reconnect(peer);
 				};
-				wire.onerror = function(error){
-					reconnect(peer);
-				};
+				// wire.onerror = function(error){
+				// 	reconnect(peer);
+				// };
 				wire.onopen = function(){
+					wire.refresh('onopen')
 					opt.mesh.hi(peer);
 				}
 				wire.onmessage = function(msg){
+					wire.refresh('onmessage')
+					if (msg.data && msg.data.length > 1e9) return;
+					// if (msg.data && msg.data.length > 500000) return;
 					if(!msg){ return }
 					opt.mesh.hear(msg.data || msg, peer);
 				};
@@ -1712,12 +1843,23 @@
 			setTimeout(function(){ !opt.super && root.on('out', {dam:'hi'}) },1); // it can take a while to open a socket, so maybe no longer lazy load for perf reasons?
 
 			var wait = 2 * 999;
+			wait += Math.floor(Math.random() * 2000 + 2000);
 			function reconnect(peer){
 				clearTimeout(peer.defer);
-				if(!opt.peers[peer.url]){ return }
-				if(doc && peer.retry <= 0){ return }
-				peer.retry = (peer.retry || opt.retry+1 || 60) - ((-peer.tried + (peer.tried = +new Date) < wait*4)?1:0);
+				clearTimeout(peer.wire && peer.wire.timeout);
+				// if (peer.__disable) return
+				// if(!opt.peers[peer.url]){ return }
+				if(doc && peer.retry <= 0){
+					// If all peers are closed, just retry anyway since we have to keep alive in network
+					if (Object.values(opt.peers).some(i => i.wire && i.wire.readyState === WebSocket.OPEN)) {
+						return console.log('No more retry for', peer.url)
+					} else {
+						Object.values(opt.peers).forEach(peer => (peer.retry = 60))
+					}
+				}
+				peer.retry = (peer.retry || opt.retry+1 || 60) - ((-peer.tried + (peer.tried = Date.now()) < wait*4)?1:0);
 				peer.defer = setTimeout(function to(){
+					opt.peers[peer.url] = peer
 					if(doc && doc.hidden){ return setTimeout(to,wait) }
 					open(peer);
 				}, wait);
@@ -1767,7 +1909,8 @@
 				this.to.next(msg); // remember to call next middleware adapter
 				var put = msg.put, soul = put['#'], key = put['.'], id = msg['#'], tmp; // pull data off wire envelope
 				disk[soul] = Gun.state.ify(disk[soul], key, put['>'], put[':'], soul); // merge into disk object
-				if(stop && size > (4999880)){ root.on('in', {'@': id, err: "localStorage max!"}); return; }
+				// This limitation is unnecessary in Electron
+				// if(stop && size > (4999880)){ root.on('in', {'@': id, err: "localStorage max!"}); return; }
 				if(!msg['@']){ acks.push(id) } // then ack any non-ack write. // TODO: use batch id.
 				if(to){ return }
 				to = setTimeout(flush, 9+(size / 333)); // 0.1MB = 0.3s, 5MB = 15s 
@@ -1948,7 +2091,7 @@
 		}
 	}());
 	Type.time = Type.time || {};
-	Type.time.is = Type.time.is || function(t){ DEP('time'); return t? t instanceof Date : (+new Date().getTime()) }
+	Type.time.is = Type.time.is || function(t){ DEP('time'); return t? t instanceof Date : (Date.now()().getTime()) }
 
 	var fn_is = Type.fn.is;
 	var list_is = Type.list.is;
diff --git a/node_modules/gun/lib/radisk.js b/node_modules/gun/lib/radisk.js
index cdb8e2d..1e3d1d2 100644
--- a/node_modules/gun/lib/radisk.js
+++ b/node_modules/gun/lib/radisk.js
@@ -1,4 +1,5 @@
 ;(function(){
+	var Radix = require('./radix')
 
 	function Radisk(opt){
 
diff --git a/node_modules/gun/lib/radix.js b/node_modules/gun/lib/radix.js
index 62fa85b..19964b1 100644
--- a/node_modules/gun/lib/radix.js
+++ b/node_modules/gun/lib/radix.js
@@ -1,7 +1,11 @@
 ;(function(){
-
 	function Radix(){
 		var radix = function(key, val, t){
+			if (typeof key === 'string' && key.length > 1e4) return console.log('skip long');
+			if (typeof key === 'string' && key.startsWith('data:image')) {
+				console.log('skip image');
+				return;
+			}
 			radix.unit = 0;
 			if(!t && u !== val){ 
 				radix.last = (''+key < radix.last)? radix.last : ''+key;
@@ -11,9 +15,12 @@
 			if(!key && Object.keys(t).length){ return t }
 			key = ''+key;
 			var i = 0, l = key.length-1, k = key[i], at, tmp;
+			let start = Date.now()
 			while(!(at = t[k]) && i < l){
 				k += key[++i];
 			}
+			const delta = Date.now() - start
+			if (delta > 1000) console.log('spend too many time', key.length, delta, key, val, t)
 			if(!at){
 				if(!each(t, function(r, s){
 					var ii = 0, kk = '';
diff --git a/node_modules/gun/lib/rfs.js b/node_modules/gun/lib/rfs.js
index 7ab3269..93686a5 100644
--- a/node_modules/gun/lib/rfs.js
+++ b/node_modules/gun/lib/rfs.js
@@ -83,7 +83,7 @@ Gun.on('create', function(root){
 	this.to.next(root);
 	var opt = root.opt;
 	if(opt.rfs === false){ return }
-	opt.store = opt.store || (!Gun.window && Store(opt));
+	opt.store = opt.store || Store(opt);
 });
 
 module.exports = Store;
\ No newline at end of file
diff --git a/node_modules/gun/lib/server.js b/node_modules/gun/lib/server.js
index 17e4038..fd6e6c1 100644
--- a/node_modules/gun/lib/server.js
+++ b/node_modules/gun/lib/server.js
@@ -1,4 +1,7 @@
 ;(function(){
+	if (!window || !window.process || !window.process.versions || !window.process.versions.electron) {
+		return
+	}
 	require('./yson');
 	var Gun = require('../gun'), u;
 	Gun.serve = require('./serve');
diff --git a/node_modules/gun/lib/stats.js b/node_modules/gun/lib/stats.js
index 28d10d5..f726692 100644
--- a/node_modules/gun/lib/stats.js
+++ b/node_modules/gun/lib/stats.js
@@ -8,6 +8,7 @@ Gun.on('opt', function(root){
 	if(false === root.opt.stats){ return }
 	var path = require('path') || {};
 	var file = root.opt.file ? path.resolve(root.opt.file).split(path.sep).slice(-1)[0] : 'radata';
+	var basePath = root.opt.file ? path.dirname(root.opt.file) : path.resolve(__dirname, '..')
 	var noop = function(){};
 	var os = require('os') || {};
 	var fs = require('fs') || {};
@@ -24,7 +25,7 @@ Gun.on('opt', function(root){
 	var S = +new Date, W;
 	var obj_ify = function(o){try{o = JSON.parse(o)}catch(e){o={}};return o;}
 	setTimeout(function(){
-		root.stats = obj_ify((fs.existsSync(__dirname+'/../stats.'+file) && fs.readFileSync(__dirname+'/../stats.'+file).toString())) || {};
+		root.stats = obj_ify((fs.existsSync(basePath+'/stats.'+file) && fs.readFileSync(basePath+'/stats.'+file).toString())) || {};
 		root.stats.up = root.stats.up || {};
 		root.stats.up.start = root.stats.up.start || +(new Date);
 		root.stats.up.count = (root.stats.up.count || 0) + 1;
@@ -63,7 +64,7 @@ Gun.on('opt', function(root){
 			root.opt.store.stats = {get:{time:{}, count:0}, put: {time:{}, count:0}}; // reset
 		}
 		JSON.stringifyAsync(stats, function(err, raw){ if(err){ return } W = true;
-			fs.writeFile(__dirname+'/../stats.'+file, raw, function(err){ W = false; err && console.log(console.STAT.err = err); console.STAT && console.STAT(S, +new Date - S, 'stats stash') });
+			fs.writeFile(basePath+'/stats.'+file, raw, function(err){ W = false; err && console.log(console.STAT.err = err); console.STAT && console.STAT(S, +new Date - S, 'stats stash') });
 		});
 
 		//exec("top -b -n 1", function(err, out){ out && fs.writeFile(__dirname+'/../stats.top.'+file, out, noop) }); // was it really seriously actually this?
diff --git a/node_modules/gun/lib/store.js b/node_modules/gun/lib/store.js
index f86634b..3ee09b8 100644
--- a/node_modules/gun/lib/store.js
+++ b/node_modules/gun/lib/store.js
@@ -1,4 +1,5 @@
 var Gun = (typeof window !== "undefined")? window.Gun : require('../gun');
+require('./radisk')
 
 Gun.on('create', function(root){
     if(Gun.TESTING){ root.opt.file = 'radatatest' }
@@ -9,6 +10,7 @@ Gun.on('create', function(root){
     var Radisk = (Gun.window && Gun.window.Radisk) || require('./radisk');
     var Radix = Radisk.Radix;
     var dare = Radisk(opt), esc = String.fromCharCode(27);
+    console.log('Radisk', dare)
     var ST = 0;
  
     root.on('put', function(msg){
diff --git a/node_modules/gun/lib/webrtc.js b/node_modules/gun/lib/webrtc.js
index abc887c..5e64a2e 100644
--- a/node_modules/gun/lib/webrtc.js
+++ b/node_modules/gun/lib/webrtc.js
@@ -5,8 +5,9 @@
 		this.to.next(root);
 		var opt = root.opt;
 		if(root.once){ return }
-		if(!Gun.Mesh){ return }
+		if (!Gun.Mesh) { return }
 		if(false === opt.RTCPeerConnection){ return }
+		console.log('[wrtc] init')
 
 		var env;
 		if(typeof window !== "undefined"){ env = window }
@@ -17,16 +18,17 @@
 		var rtcsd = opt.RTCSessionDescription || env.RTCSessionDescription || env.webkitRTCSessionDescription || env.mozRTCSessionDescription;
 		var rtcic = opt.RTCIceCandidate || env.RTCIceCandidate || env.webkitRTCIceCandidate || env.mozRTCIceCandidate;
 		if(!rtcpc || !rtcsd || !rtcic){ return }
+		// console.log('[wrtc]', rtcpc, rtcsd, rtcic, env)
 		opt.RTCPeerConnection = rtcpc;
 		opt.RTCSessionDescription = rtcsd;
 		opt.RTCIceCandidate = rtcic;
 		opt.rtc = opt.rtc || {'iceServers': [
-      {urls: 'stun:stun.l.google.com:19302'},
-      {urls: "stun:stun.sipgate.net:3478"}/*,
+			{ urls: ['stun:stun.l.google.com:19302', 'stun:global.stun.twilio.com:3478'] },
+      {urls: "stun:stun.sipgate.net:3478"},
       {urls: "stun:stun.stunprotocol.org"},
       {urls: "stun:stun.sipgate.net:10000"},
       {urls: "stun:217.10.68.152:10000"},
-      {urls: 'stun:stun.services.mozilla.com'}*/ 
+      {urls: 'stun:stun.services.mozilla.com'}
     ]};
     // TODO: Select the most appropriate stuns. 
     // FIXME: Find the wire throwing ICE Failed
@@ -34,21 +36,29 @@
     opt.rtc.dataChannel = opt.rtc.dataChannel || {ordered: false, maxRetransmits: 2};
     opt.rtc.sdp = opt.rtc.sdp || {mandatory: {OfferToReceiveAudio: false, OfferToReceiveVideo: false}};
     opt.announce = function(to){
+			// console.log('announce', opt.pid, to)
 			root.on('out', {rtc: {id: opt.pid, to:to}}); // announce ourself
     };
 		var mesh = opt.mesh = opt.mesh || Gun.Mesh(root);
 		root.on('create', function(at){
+			// console.log('[create]', at)
 			this.to.next(at);
 			setTimeout(opt.announce, 1);
 		});
+		setTimeout(opt.announce, 50)
+		// setInterval(opt.announce, 15000)
 		root.on('in', function(msg){
+			// if (msg.rtc) console.log('in', msg)
 			if(msg.rtc){ open(msg) }
 			this.to.next(msg);
 		});
 
 		function open(msg){
-			var rtc = msg.rtc, peer, tmp;
+			var rtc = msg.rtc, tmp;
+			/** @type { RTCPeerConnection } */
+			var peer
 			if(!rtc || !rtc.id){ return }
+			// console.log('[gun wrtc]', rtc)
 			delete opt.announce[rtc.id]; /// remove after connect
 			if(tmp = rtc.answer){
 				if(!(peer = opt.peers[rtc.id] || open[rtc.id]) || peer.remoteSet){ return }
@@ -57,25 +67,62 @@
 			}
 			if(tmp = rtc.candidate){
 				peer = opt.peers[rtc.id] || open[rtc.id] || open({rtc: {id: rtc.id}});
-				return peer.addIceCandidate(new opt.RTCIceCandidate(tmp));
+				const addIce = () => {
+					if (!peer.remoteDescription) {
+						// delete open[rtc.id]
+						return
+					}
+					return peer.addIceCandidate(new opt.RTCIceCandidate(tmp)).catch(e => {
+						// console.log('add error', peer, tmp, e)
+						if (!peer.remoteDescription) delete open[rtc.id]
+					});
+				}
+				if (peer.remoteDescription) return addIce()
+				return setTimeout(addIce, 2000)
 			}
 			//if(opt.peers[rtc.id]){ return }
 			if(open[rtc.id]){ return }
-			(peer = new opt.RTCPeerConnection(opt.rtc)).id = rtc.id;
+			peer = new opt.RTCPeerConnection(opt.rtc)
+			if (!peer) return console.log('no peer', peer, opt.rtc)
+			peer.id = rtc.id
+			// console.log('on open', msg, peer)
 			var wire = peer.wire = peer.createDataChannel('dc', opt.rtc.dataChannel);
 			open[rtc.id] = peer;
+			let destroyed = false
+			const destroy = () => {
+				if (destroyed) return
+				destroyed = true
+				peer.close()
+				if (peer.wire) {
+					peer.wire.close()
+					peer.wire = null
+				}
+				peer.onicecandidate = null
+				peer.ondatachannel = null
+			}
 			wire.onclose = function(){
-				delete open[rtc.id];
+				// console.log('rtc close', rtc)
+				// delete open[rtc.id];
+				destroy()
 				mesh.bye(peer);
 				//reconnect(peer);
 			};
-			wire.onerror = function(err){};
+			wire.onerror = function(err){
+				// console.log('rtc error', rtc, err)
+				destroy()
+				delete open[rtc.id]
+			};
 			wire.onopen = function(e){
-				//delete open[rtc.id];
+				// console.log('wire open', opt)
+				delete open[rtc.id];
 				mesh.hi(peer);
+				if (opt.onWrtcPeer) {
+					opt.onWrtcPeer(peer)
+				}
 			}
 			wire.onmessage = function(msg){
-				if(!msg){ return }
+				// console.log('rtc msg', rtc, msg)
+				if (!msg) { return }
 				mesh.hear(msg.data || msg, peer);
 			};
 			peer.onicecandidate = function(e){ // source: EasyRTC!
@@ -89,7 +136,8 @@
 				rc.onclose = wire.onclose;
 			}
 			if(tmp = rtc.offer){
-				rtc.offer.sdp = rtc.offer.sdp.replace(/\\r\\n/g, '\r\n')
+				// console.log('set remote desc')
+				rtc.offer.sdp = rtc.offer.sdp.replace(/\\+r\\+n/g, '\r\n')
 				peer.setRemoteDescription(new opt.RTCSessionDescription(tmp)); 
 				peer.createAnswer(function(answer){
 					peer.setLocalDescription(answer);
@@ -98,6 +146,7 @@
 				return;
 			}
 			peer.createOffer(function(offer){
+				// console.log('create offer')
 				peer.setLocalDescription(offer);
 				root.on('out', {'@': msg['#'], rtc: {offer: offer, id: opt.pid}});
 			}, function(){}, opt.rtc.sdp);
diff --git a/node_modules/gun/sea.js b/node_modules/gun/sea.js
index 2319fef..d402998 100644
--- a/node_modules/gun/sea.js
+++ b/node_modules/gun/sea.js
@@ -31,16 +31,16 @@
   })(USE, './root');
 
   ;USE(function(module){
-    var SEA = USE('./root');
-    try{ if(SEA.window){
-      if(location.protocol.indexOf('s') < 0
-      && location.host.indexOf('localhost') < 0
-      && ! /^127\.\d+\.\d+\.\d+$/.test(location.hostname)
-      && location.protocol.indexOf('file:') < 0){
-        console.warn('HTTPS needed for WebCrypto in SEA, redirecting...');
-        location.protocol = 'https:'; // WebCrypto does NOT work without HTTPS!
-      }
-    } }catch(e){}
+    // var SEA = USE('./root');
+    // try{ if(SEA.window){
+    //   if(location.protocol.indexOf('s') < 0
+    //   && location.host.indexOf('localhost') < 0
+    //   && ! /^127\.\d+\.\d+\.\d+$/.test(location.hostname)
+    //   && location.protocol.indexOf('file:') < 0){
+    //     console.warn('HTTPS needed for WebCrypto in SEA, redirecting...');
+    //     location.protocol = 'https:'; // WebCrypto does NOT work without HTTPS!
+    //   }
+    // } }catch(e){}
   })(USE, './https');
 
   ;USE(function(module){
@@ -337,6 +337,7 @@
       // First: ECDSA keys for signing/verifying...
       var sa = await shim.subtle.generateKey({name: 'ECDSA', namedCurve: 'P-256'}, true, [ 'sign', 'verify' ])
       .then(async (keys) => {
+        console.log('usr keys', keys)
         // privateKey scope doesn't leak out from here!
         //const { d: priv } = await shim.subtle.exportKey('jwk', keys.privateKey)
         var key = {};
@@ -357,6 +358,7 @@
       try{
       var dh = await ecdhSubtle.generateKey({name: 'ECDH', namedCurve: 'P-256'}, true, ['deriveKey'])
       .then(async (keys) => {
+        console.log('usr e keys', keys)
         // privateKey scope doesn't leak out from here!
         var key = {};
         key.epriv = (await ecdhSubtle.exportKey('jwk', keys.privateKey)).d;
@@ -467,7 +469,7 @@
       if(cb){ try{ cb(r) }catch(e){console.log(e)} }
       return r;
     } catch(e) {
-      console.log(e); // mismatched owner FOR MARTTI
+      // console.log(e); // mismatched owner FOR MARTTI
       SEA.err = e;
       if(SEA.throw){ throw e }
       if(cb){ cb() }
@@ -954,6 +956,11 @@
         delete sS.pair;
         }catch(e){};
       }
+      var cat = gun._
+      if (cat) {
+        console.log('CAT', cat)
+        if (cat.ing) cat.ing = false
+      }
       return gun;
     }
   })(USE, './create');
@@ -1333,7 +1340,6 @@
         check.hash(eve, msg, val, key, soul, at, no); return;
       } 
       check.any(eve, msg, val, key, soul, at, no, at.user||''); return;
-      eve.to.next(msg); // not handled
     }
     check.hash = function(eve, msg, val, key, soul, at, no){
       SEA.work(val, null, function(data){
diff --git a/node_modules/gun/sea/https.js b/node_modules/gun/sea/https.js
index 4f12465..fbbc011 100644
--- a/node_modules/gun/sea/https.js
+++ b/node_modules/gun/sea/https.js
@@ -1,12 +1,12 @@
 
     var SEA = require('./root');
-    try{ if(SEA.window){
-      if(location.protocol.indexOf('s') < 0
-      && location.host.indexOf('localhost') < 0
-      && ! /^127\.\d+\.\d+\.\d+$/.test(location.hostname)
-      && location.protocol.indexOf('file:') < 0){
-        console.warn('HTTPS needed for WebCrypto in SEA, redirecting...');
-        location.protocol = 'https:'; // WebCrypto does NOT work without HTTPS!
-      }
-    } }catch(e){}
+    // try{ if(SEA.window){
+    //   if(location.protocol.indexOf('s') < 0
+    //   && location.host.indexOf('localhost') < 0
+    //   && ! /^127\.\d+\.\d+\.\d+$/.test(location.hostname)
+    //   && location.protocol.indexOf('file:') < 0){
+    //     console.warn('HTTPS needed for WebCrypto in SEA, redirecting...');
+    //     location.protocol = 'https:'; // WebCrypto does NOT work without HTTPS!
+    //   }
+    // } }catch(e){}
   
\ No newline at end of file
diff --git a/node_modules/gun/src/shim.js b/node_modules/gun/src/shim.js
index a7a6b15..a5a6375 100644
--- a/node_modules/gun/src/shim.js
+++ b/node_modules/gun/src/shim.js
@@ -47,7 +47,7 @@ Object.keys = Object.keys || function(o){
 	return l;
 }
 ;(function(){ // max ~1ms or before stack overflow 
-	var u, sT = setTimeout, l = 0, c = 0, sI = (typeof setImmediate !== ''+u && setImmediate) || sT; // queueMicrotask faster but blocks UI
+	var u, sT = setTimeout, l = 0, c = 0, sI = (typeof queueMicrotask !== ''+u && queueMicrotask) || sT; // queueMicrotask faster but blocks UI
 	sT.hold = sT.hold || 9;
 	sT.poll = sT.poll || function(f){ //f(); return; // for testing
 		if((sT.hold >= (+new Date - l)) && c++ < 3333){ f(); return }
