const{EventEmitter:EventEmitter}=require("events"),is=require("electron-is"),{ipcRenderer:ipcRenderer}=is.renderer()?require("electron"):require("../src/api/server"),bencode=require("bencode"),payChunkSize=1e7,payPrice=1,payedMap=new Map,autoRenewMap=new Map,transactions=new Map,peerDownloaded=new Map,totalDownloaded=new Map,samePeerWires=new Map,nonAbDownloaded=new Map,payedNonAb=new Map,addNonAbDownloaded=(e,t)=>{nonAbDownloaded.has(e)||nonAbDownloaded.set(e,0),payedNonAb.has(e)||payedNonAb.set(e,0);const n=nonAbDownloaded.get(e)+t;nonAbDownloaded.set(e,n);const o=Math.floor(n/1e8),s=o-payedNonAb.get(e);s>0&&(console.log("Request provident payment for",e,"count:",s),ipcRenderer.send("request-provident-payment",{infoHash:e,count:10*s}),payedNonAb.set(e,o))},delayPaments=[],transactionMap=new Map,storedUser="undefined"!==typeof localStorage?localStorage.getItem("userInfo"):null,userInfo=storedUser?JSON.parse(storedUser):{user:"",sub:""};console.log("Init user",userInfo);let client=null;export const useClientEvents=e=>{client=e,client.userInfo=userInfo,client.on("request-renew",(e=>ipcRenderer.send("webtorrent-request-renew",e))),client.on("verify-payment",(e=>ipcRenderer.send("webtorrent-verify-payment",e)))};ipcRenderer.on("set-user",((e,t)=>{t||(t=e),console.log("set user",t),userInfo.user=t.user,userInfo.sub=t.sub,"undefined"!==typeof localStorage&&localStorage.setItem("userInfo",JSON.stringify(userInfo)),client.torrents.forEach((e=>{e.wires.forEach((e=>{e._is_alphabiz_peer_&&e.alphabiz_protocol&&e.alphabiz_protocol._sendUserInfo()}))}))}));const onNewPayment=(e,t)=>{t||(t=e),console.log("Payment info",t);const n=client.get(t.infoHash);if(t.payedSize=t.payed*payChunkSize/payPrice,transactions.set(t.id,t),!n||!n.wires.length){if(delayPaments.some((e=>e.id===t.id)))return;return delayPaments.push(t)}for(const o of n.wires)if(o.remoteSub&&o.remoteSub===t.remoteSubId){if(!o.alphabiz_protocol)continue;o.alphabiz_protocol._send({ab_payment:JSON.stringify({infoHash:t.infoHash,peerId:t.peerId,subId:userInfo.sub,payed:t.payed,autoRenew:!0,id:t.id})})}};ipcRenderer.on("payment-info",onNewPayment),ipcRenderer.on("restart-payment",onNewPayment),ipcRenderer.on("payment-verified",((e,t)=>{t||(t=e);const n=client.get(t.infoHash);if(!n||!n.wires.length)return console.log("tr not found");for(const o of n.wires)if(o.remoteSub&&o.remoteSub===t.subId){if(!o.alphabiz_protocol)continue;o.alphabiz_protocol._onPaymentVerified({infoHash:t.infoHash,peerId:t.peerId,subId:userInfo.sub,payed:t.payed,autoRenew:!0,id:t.id})}})),ipcRenderer.on("finish-payment",((e,t)=>{const n=client.get(t.infoHash);if(!n||!n.wires.length)return console.log("finish: tr not found");for(const o of n.wires)if(o.remoteSub&&o.remoteSub===t.remoteSub){if(!o.alphabiz_protocol)continue;o.alphabiz_protocol._send({ab_payment_finish:t.transactionId}),o.transactions&&o.transactions.includes(t.transactionId)&&o.transactions.splice(o.transactions.indexOf(t.transactionId),1)}})),ipcRenderer.on("close-payment",((e,t)=>{t||(t=e);const n=client.get(t.infoHash);if(!n||!n.wires.length)return console.log("close: tr not found");for(const o of n.wires)if(o.remoteSub&&o.remoteSub===t.remoteSub){if(!o.alphabiz_protocol)continue;o.alphabiz_protocol._send({ab_payment_close:JSON.stringify({infoHash:t.infoHash,id:t.id})})}}));const removeTransaction=e=>{if(console.log("To remove",e),!e||!e.infoHash)return;const t=e.infoHash,n=transactionMap.get(t);for(let o=0;o<n.length;o++)if(n[o].id===e.id){const e=n.splice(o,1);return void console.log("Removed transaction",e)}};export const useAlphabizProtocol=(e,t)=>{const n="alphabiz_protocol";class o extends EventEmitter{constructor(e){super(),this._wire=e,this._peerId=null,this._infoHash=t.infoHash,this.isSeeding=t.isSeeding,this.download=t.download,this._user=userInfo.user||"",this._subId=userInfo.sub||"",this.remoteSub="",this.uniqueId="",this._wire._setThrottleGroup=e=>this._setThrottleGroup(e),this.maxUploadSpeed=1e6,this._wire.maxUploadSpeed=1e6,this._initUpload(),this._initDownload()}onHandshake(e,t){this._infoHash=e,this._peerId=t,this._sendUserInfo()}_sendUserInfo(){this._user=userInfo.user||"",this._subId=userInfo.sub||"",this._send({ab_peer:"_ab_"+this._peerId,ab_user:this._user,ab_sub:this._subId,ab_has_meta:t.metadata?1:0}),t.metadata||t.once("metadata",(()=>{this._send({ab_has_meta:1})}))}onExtendedHandshake(e){e.m&&e.m[n]||console.error("Client does not support",n)}_sendByteMap(){t.byteMap&&this._send({ab_byte_map:JSON.stringify(t.byteMap)})}_initDownload(){const e=this._wire,t=t=>{if(Math.random()>.99&&process.memoryUsage().rss/1e9>3&&process.exit(1),this.isSeeding)return;if(!this.remoteSub||!this.uniqueId)return void addNonAbDownloaded(this._infoHash,t);totalDownloaded.get(this.uniqueId)||totalDownloaded.set(this.uniqueId,e.downloaded||0);const n=totalDownloaded.get(this.uniqueId);totalDownloaded.set(this.uniqueId,n+t)};e.on("download",t)}_initUpload(){const e=this._wire,n=t=>{if(!this.remoteSub||!this.uniqueId)return;if(this.remoteSub===this._subId)return;const n=payedMap.get(this.uniqueId)-t;if(isNaN(n))return;const o=transactionMap.get(this._infoHash);if(o&&o.length&&(o[0].payedSize-=t,o[0].payedSize<0)){const e=o.shift();ipcRenderer.send("webtorrent-payment-completed",{transactionId:e.id,infoHash:this._infoHash,remoteSub:this.remoteSub})}const s=e.uploadSpeed?e.uploadSpeed():1e6;s>this.maxUploadSpeed&&(this.maxUploadSpeed=1e6*Math.ceil(s/1e6),this._wire.maxUploadSpeed=this.maxUploadSpeed);const i=samePeerWires.get(this.uniqueId)||[],a=i.reduce(((e,t)=>e+(t.maxUploadSpeed||1e6)),0)||this.maxUploadSpeed;if(autoRenewMap.get(this.uniqueId)&&n<5*a){autoRenewMap.set(this.uniqueId,!1);const e=Math.ceil(a/1e6);console.log("[[wt-ext]] _send ab_renew left < 5*speed",e),this.renew(e<10?10:e)}if(n<=0){if(this._setThrottleGroup("mid"),payedMap.set(this.uniqueId,0),autoRenewMap.get(this.uniqueId)||!autoRenewMap.has(this.uniqueId)){const e=Math.ceil(a/1e6);autoRenewMap.set(this.uniqueId,!1),console.log("[[wt-ext]] _send ab_renew from left<=0",e),this.renew(e<10?10:e)}}else this._setThrottleGroup("high"),payedMap.set(this.uniqueId,n)};e.on("upload",n);const o=()=>{this._wire.transactions&&(ipcRenderer.send("webtorrent-task-done",{infoHash:t.infoHash,name:t.name,payments:this._wire.transactions}),this._send({ab_task_done:this._wire.transactions.join("$")}))},s=()=>this._sendByteMap();e.on("close",(()=>{t.off("done",o),t.off("byte-map-change",s);const n=samePeerWires.get(this.uniqueId);n&&n.includes(e)&&(console.log("remove same wire"),n.splice(n.indexOf(e),1))})),t.on("done",o),t.on("byte-map-change",s)}_onAbPeer(e,n,o){if(!e.startsWith("_ab_"))return;if(this._remotePeerId=e.substring(4),this._wire._is_alphabiz_peer_=!0,this._wire.ab_peer=e,this._wire.remoteUser=n,this._wire.remoteSub=o,this._wire.transactions=[],this.remoteSub=o,this.uniqueId=o+"#"+this._infoHash,samePeerWires.has(this.uniqueId)){const e=samePeerWires.get(this.uniqueId);e.includes(this._wire)||e.push(this._wire)}else samePeerWires.set(this.uniqueId,[this._wire]);if(peerDownloaded.has(this.uniqueId)||peerDownloaded.set(this.uniqueId,0),peerDownloaded.get(this.uniqueId)>this._wire.downloaded&&peerDownloaded.set(this.uniqueId,this._wire.downloaded),t._has_alphabiz_user_=!0,t.emit("ab_peer",e),this._subId===this.remoteSub)return console.log("[wt-ab-peer] Connected to self"),this._sendByteMap(),void this._setThrottleGroup("high");if(o&&payedMap.get(this.uniqueId)>0?this._onPaymentVerified({infoHash:t.infoHash,subId:o,autoRenew:!0,payed:0},!0):(this._setThrottleGroup("mid"),this.isSeeding&&!payedMap.get(this.uniqueId)&&(this._sendByteMap(),setTimeout((()=>{this.renew()}),1e3))),delayPaments.length)for(let t=0;t<delayPaments.length;t++){const e=delayPaments[t];e.infoHash===this._infoHash&&e.remoteSubId===this.remoteSub&&(this._send({ab_payment:JSON.stringify({infoHash:e.infoHash,subId:userInfo.sub,payed:e.payed,id:e.id,autoRenew:!0})}),delayPaments.splice(t--,1))}this._sendByteMap();const s=setInterval((()=>{this._wire&&!this._wire.destroyed||clearInterval(s),this.isSeeding||"mid"!==this._wire.remoteGroup||this.isSeeding||this._onRenew(this.remoteSub,10)}),5e3)}renew(e=10){this._subId!==this.remoteSub?this._subId?this._send({ab_renew:this._subId,ab_count:e}):console.warn("Cannot get subId"):console.log("[wt-renew] Remote account is same as local")}_setThrottleGroup(t){const n=this._wire._uploadThrottle;if(n&&n._group){if(!e.throttleGroups[t])throw new Error("level_not_found");n._group!==e.throttleGroups[t]&&(console.log("[[wt-ext]] _setThrottleGroup",t),autoRenewMap.set(this.uniqueId,!0),"mid"===t&&n._group===e.throttleGroups.high&&(console.log("Peer dropped back to mid. Send renew request",this._subId,this._infoHash),this.renew(),setTimeout((()=>{n._group!==e.throttleGroups.high&&(console.log("Peer is still in mid. Send renew request",this._subId,this._infoHash),this.renew())}),5e3)),n._group._removeThrottle(n),e.throttleGroups[t]._addThrottle(n),n._group=e.throttleGroups[t],console.log("[[wt-ext]] _send ab_speed_group: ",t),this._send({ab_speed_group:t}))}}_onSpeedGroup(e){console.log("[[wt-ext]] _onSpeedGroup",e),this._wire.remoteGroup=e}_onPaymentReceived(t){e.emit("verify-payment",t)}_onPaymentVerified({infoHash:e,payed:n,id:o}){const s=this.remoteSub;if(console.log("payment verified"),!s||!this.uniqueId)return;if(this._setThrottleGroup("high"),autoRenewMap.set(this.uniqueId,!0),!o||transactions.has(o))return;const i=n*payChunkSize/payPrice;if(transactions.set(o,{infoHash:e,payed:n,autoRenew:!0,id:o,payedSize:i}),e!==t.infoHash)return;if(isNaN(i))return;payedMap.has(this.uniqueId)||payedMap.set(this.uniqueId,0);const a=payedMap.get(this.uniqueId);payedMap.set(this.uniqueId,a+i),transactionMap.has(e)||transactionMap.set(e,[]);const r=transactionMap.get(e);r.push({infoHash:e,subId:s,payedSize:i,id:o,startPosition:this._wire.recieved}),this._send({ab_payment_accepted:o})}_onPaymentAccepted(e){this._wire.transactions.push(e)}_onPaymentCompleted(e){console.log("Completed",e,this.remoteSub),ipcRenderer.send("webtorrent-payment-completed",{transactionId:e,remoteSub:this.remoteSub,infoHash:this._infoHash}),this._wire.transactions.includes(e)&&this._wire.transactions.splice(this._wire.transactions.indexOf(e),1)}_onTaskDone(e){const t=e.split("$").filter((e=>e.length));if(console.log("Remote task done"),t.length)for(const n of t)this._onPaymentCompleted(n);payedMap.delete(this.remoteSub,this._infoHash)}_onPaymentFinished(e){console.log("Finished",e);const n=transactions.get(e);if(n){const o=totalDownloaded.get(this.uniqueId)||0;peerDownloaded.has(this.uniqueId)||peerDownloaded.set(this.uniqueId,0);const s=peerDownloaded.get(this.uniqueId),i=o-s;i>.9*n.payedSize||t.done||t.downloaded>=.9*t.length?(ipcRenderer.send("webtorrent-payment-finished",{id:e,remoteSub:this.remoteSub,infoHash:this._infoHash}),peerDownloaded.set(this.uniqueId,s+(i>n.payedSize?n.payedSize:i)),console.log(`Payment ${e} is finished. Payed for ${n.payedSize}. Received ${i}. Done: ${t.done}`),console.log("Update prev-download",s,peerDownloaded.get(this.uniqueId))):(console.log(`Payment ${e} is marked as not-finished. Payed for ${n.payedSize}. Received ${i}`),console.log(`Prev: ${s}. Downloaded: ${o}`))}else ipcRenderer.send("webtorrent-payment-finished",{id:e,remoteSub:this.remoteSub,infoHash:this._infoHash})}_onPaymentClosed(e){console.log("Close",e),removeTransaction(e)}_onRenew(t,n=10){const o=n&&parseInt(n)?parseInt(n):10;console.log("[[wt-ext]] _onRenew",t,this._remotePeerId,o),e.emit("request-renew",{infoHash:this._infoHash,peerId:this._remotePeerId,payCount:o,subId:t})}onMessage(e){let t;try{t=bencode.decode(e)}catch(n){return void console.error("cannot decode buf",e)}if(t.ab_has_meta&&(this._wire.remote_has_meta=!0),t.ab_byte_map&&(this._wire.remote_byte_map=JSON.parse(t.ab_byte_map.toString())),t.ab_peer)return this._onAbPeer(t.ab_peer.toString(),t.ab_user&&t.ab_user.toString(),t.ab_sub&&t.ab_sub.toString());if(t.ab_speed_group)return this._onSpeedGroup(t.ab_speed_group.toString());if(t.ab_payment){const e=JSON.parse(t.ab_payment.toString());return console.log("Protocol payment",e),this._onPaymentReceived(e)}return t.ab_payment_completed?this._onPaymentCompleted(t.ab_payment_completed.toString()):t.ab_payment_accepted?this._onPaymentAccepted(t.ab_payment_accepted.toString()):t.ab_payment_finish?this._onPaymentFinished(t.ab_payment_finish.toString()):t.ab_payment_close?this._onPaymentClosed(JSON.parse(t.ab_payment_close.toString())):t.ab_task_done?this._onTaskDone(t.ab_task_done.toString()):t.ab_renew?this._onRenew(t.ab_renew.toString(),t.ab_count?.toString()):void 0}_send(e){const t=Object.entries(this._wire.extendedMapping).find((e=>e[1]===n)),o=t&&t[0];o>=0&&this._wire.extended(Number(o),bencode.encode(e))}onClose(){console.log("onClose",this._wire);this._wire.recieved}}return o.prototype.name=n,o};